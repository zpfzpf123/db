{
  "note": [
 
    {
      "id": 12,
      "type": "vue",
      "recommendationIndex": 4,
      "name": "vue2+动态表单生成设计(根据后端返回显示对应表单)",
      "content": "这是一个使用 `DynamicForms` 组件的 Vue.js 插件的使用说明文档。该插件允许你在 Vue.js 应用中全局使用 `DynamicForms` 组件。\n\n## 代码\n\n```js\n<template>\n  <div v-if=\"Object.keys(args).length\">\n    <div v-for=\"(item, index) in dynamicComponentParameters\" :key=\"index\">\n      <el-form-item v-if=\"item.type === 'el-input'\" :label=\"item.name\">\n        <el-input v-model=\"args[item.val]\" />\n      </el-form-item>\n      <el-form-item v-if=\"item.type === 'el-select'\" :label=\"item.name\">\n        <el-select v-model=\"args[item.val]\" placeholder=\"请选择算法类型\">\n          <el-option\n            v-for=\"selectVal of item.selectList\"\n            :key=\"selectVal.label\"\n            :label=\"selectVal.label\"\n            :value=\"selectVal.value\"\n          />\n        </el-select>\n      </el-form-item>\n      <el-form-item v-if=\"item.type === 'el-checkbox'\" :label=\"item.name\">\n        <el-checkbox-group v-model=\"args[item.val]\">\n          <el-checkbox\n            v-for=\"checkVal of item.checkList\"\n            :key=\"checkVal.label\"\n            :label=\"checkVal.label\"\n          />\n        </el-checkbox-group>\n      </el-form-item>\n      <el-form-item v-if=\"item.type === 'el-radio'\" :label=\"item.name\">\n        <el-radio-group v-model=\"args[item.val]\">\n          <el-radio\n            v-for=\"radioVal of item.radioList\"\n            :key=\"radioVal.label\"\n            :label=\"radioVal.label\"\n          />\n        </el-radio-group>\n      </el-form-item>\n      <el-form-item v-if=\"item.type === 'el-input-number'\" :label=\"item.name\">\n        <el-input-number v-model=\"args[item.val]\" :step=\"item.step\" :min=\"item.min\" :max=\"item.max\" />\n      </el-form-item>\n      <el-form-item v-if=\"item.type === 'el-switch'\" :label=\"item.name\">\n        <el-switch v-model=\"args[item.val]\" />\n      </el-form-item>\n    </div>\n  </div>\n</template>\n<script>\nimport { Loading } from 'element-ui'\n\nexport default {\n  name: 'DynamicForms',\n  props: {\n    // 动态组件列表\n    dynamicComponentParameters: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    // 动态组件绑定后传值的参数\n    // eslint-disable-next-line vue/require-default-prop\n    args: {\n      type: Object,\n      default() {\n        return {}\n      }\n    }\n  },\n  data() {\n    return {\n      // 默认参数值\n      defaultValues: {\n        'string': '',\n        'number': 0,\n        'boolean': false,\n        'array': [],\n        'object': {},\n        'function': function() {\n        }\n      },\n      // 加载状态\n      loadingInstance: null\n    }\n  },\n  computed: {\n    // 参数默认值列表\n    argList() {\n      // eslint-disable-next-line vue/no-async-in-computed-properties\n      return new Promise((resolve, reject) => {\n        this.loadingInstance = Loading.service({\n          fullscreen: true,\n          text: '加载中,请稍等....'\n        })\n        // 模拟接口异步\n        setTimeout(() => {\n          const argList = this.dynamicComponentParameters.map(item => {\n            return {\n              name: item.val,\n              type: item.valType\n            }\n          })\n          resolve(argList)\n        }, 1000)\n      })\n    },\n    // 更新后的ages参数\n    newArgs() {\n      const args = this.args\n      // eslint-disable-next-line vue/no-async-in-computed-properties\n      this.argList.then(res => {\n        res.forEach(list => {\n          console.log(this.defaultValues[list.type])\n          this.$set(args, list.name, this.defaultValues[list.type])\n        })\n        this.loadingInstance.close()\n      })\n      return args\n    }\n  },\n  mounted() {\n    this.init()\n  },\n  methods: {\n    init() {\n      /**\n       * 初始化的时候给动态组件绑定后传值的参数赋默认值\n       * 可根据后端传值的类型和字段赋默认值\n       * */\n      this.$emit('update:args', this.newArgs)\n      console.log(this.args.length)\n    }\n  }\n}\n</script>\n<style scoped lang=\"scss\">\n\n</style>\n```\n\n\n\n## 使用\n\n在你的 Vue 组件中，你可以使用 `DynamicForms` 组件来创建一个动态表单。以下是 `DynamicForms` 组件的属性：\n\n- `dynamicComponentParameters`：动态组件列表，数组类型，默认值为 `[]`。每个元素是一个对象，包含以下属性：\n  - `type`：组件类型，例如 `'el-input'`、`'el-select'` 等。\n  - `name`：组件的标签。\n  - `val`：组件的值，将绑定到 `args` 对象的对应属性上。\n  - `selectList`、`checkList`、`radioList`：当组件类型为 `'el-select'`、`'el-checkbox'` 或 `'el-radio'` 时，这些属性包含了选项列表。\n  - `step`、`min`、`max`：当组件类型为 `'el-input-number'` 时，这些属性用于设置数字输入框的步长、最小值和最大值。\n\n- `args`：动态组件绑定后传值的参数，对象类型，默认值为 `{}`。对象的每个属性对应一个动态组件，属性名为组件的 `val`，属性值为组件的值。\n\n`DynamicForms` 组件还包含以下方法：\n\n- `init`：初始化的时候给动态组件绑定后传值的参数赋默认值，可根据后端传值的类型和字段赋默认值。\n\n## 示例\n\n以下是一个如何在 Vue 组件中使用 `DynamicForms` 组件的示例：\n\n```js\n<template>\n  <div>\n    <DynamicForms :dynamicComponentParameters=\"dynamicComponentParameters\" :args.sync=\"args\" />\n  </div>\n</template>\n\n<script>\nimport DynamicForms from './DynamicForms'\n\nexport default {\n  components: {\n    DynamicForms\n  },\n  data() {\n    return {\n      dynamicComponentParameters: [\n        { type: 'el-input', name: 'Input', val: 'input' },\n        { type: 'el-select', name: 'Select', val: 'select', selectList: [{ label: 'Option1', value: 'option1' }, { label: 'Option2', value: 'option2' }] },\n        // 更多的动态组件参数...\n      ],\n      args: {\n        // 动态组件绑定后传值的参数\n      }\n    }\n  }\n}\n</script>\n```\n\n在这个示例中，你需要提供你的动态组件参数列表 `dynamicComponentParameters` 和动态组件绑定后传值的参数 `args`。"
    },
    {
      "id": 13,
      "type": "vue",
      "recommendationIndex": 4,
      "name": "vue2播放hls视频流)",
      "content": "这是一个使用 `HLSPlay` 组件的 Vue.js 插件的使用说明文档。该插件允许你在 Vue.js 应用中全局使用 `HLSPlay` 组件。\n\n## 下载\n\n```js\nnpm install vue-video-player@5.0.2\nnpm install videojs-contrib-hls@5.14.1\n```\n\n## 代码\n\n```js\n<template>\n  <section class=\"HLSPlay-component\">\n    <video-player\n      ref=\"videoPlayer\"\n      class=\"video-player-box\"\n      :options=\"playerOptions\"\n      :playsinline=\"true\"\n      custom-event-name=\"customstatechangedeventname\"\n    />\n  </section>\n</template>\n<script>\nimport 'video.js/dist/video-js.css'\nimport 'videojs-contrib-hls'\nimport { videoPlayer } from 'vue-video-player'\n\nexport default {\n  name: 'HLSPlay',\n  components: {\n    videoPlayer\n  },\n  props: {\n    // eslint-disable-next-line vue/require-default-prop\n    src: {\n      type: String\n    },\n    // eslint-disable-next-line vue/prop-name-casing,vue/require-default-prop\n    cover_url: {\n      type: String\n    }\n  },\n  data() {\n    return {\n      playerOptions: {\n        autoplay: true,\n        muted: true,\n        preload: '63:25',\n        language: 'zh-CN',\n        fluid: true,\n        // playbackRates: [0.7, 1.0, 1.5, 2.0],\n        sources: [\n          {\n            type: 'application/x-mpegURL',\n            src: this.src // 路径\n            // src: 'https://cdn.theguardian.tv/webM/2015/07/20/150716YesMen_synd_768k_vp8.webm'\n          }\n        ],\n        poster: this.cover_url, // 你的封面地址\n        notSupportedMessage: '此视频暂无法播放，请稍后再试'\n        // controlBar: {\n        //   timeDivider: true,\n        //   durationDisplay: true,\n        //   remainingTimeDisplay: false,\n        //   fullscreenToggle: true, // 全屏按钮\n        //   currentTimeDisplay: true, // 当前时间\n        //   volumeControl: false, // 声音控制键\n        //   playToggle: false, // 暂停和播放键\n        //   // progressControl: true // 进度条\n        // }\n      }\n    }\n  },\n  computed: {\n    player() {\n      return this.$refs.videoPlayer.player\n    }\n  },\n  mounted() {\n    // this.play()\n    // console.log('this is current player instance object', this.player)\n  },\n  beforeDestroy() {\n    this.player && this.player.dispose()\n  },\n  methods: {\n    setSrc(src) {\n      this.player.src({ src: src, type: 'application/x-mpegURL' })\n    },\n    play() {\n      try {\n        this.$nextTick(() => {\n          this.player.play().then(res => {\n            this.$message('获取视频成功')\n          }).catch(e => {\n            console.log(e, '失败')\n          }) // 播放\n        })\n      } catch (e) {\n        console.log(e)\n      }\n      // 手动触发播放\n    }\n  }\n\n}\n</script>\n<style lang=\"scss\" scoped>\n.HLSPlay-component{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  ::v-deep.video-player-box{\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    #vjs_video_1{\n      height: 100%;\n    }\n   #vjs_video_3 {\n      height: inherit;\n      padding-top: 36.25% !important;\n    }\n  }\n}\n::v-deep.video-player {\n  //.vjs_video_3-dimensions {\n  //  width: 100%;\n  //  height: 96%;\n  //}\n\n  // 初始化，暂停按钮居中\n  .vjs-big-play-button {\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  .video-js .vjs-tech {\n    object-fit: fill;\n    height: 100%;\n  }\n  .vjs-fluid{\n    padding-top: 2vw !important;\n    height: inherit;\n  }\n}\n</style>\n\n\n```\n\n\n\n## 使用\n\n在你的 Vue 组件中，你可以使用 `HLSPlay` 组件来创建一个 HLS 视频播放器。以下是 `HLSPlay` 组件的属性：\n\n- `src`：视频源的 URL，字符串类型。\n- `cover_url`：视频封面的 URL，字符串类型。\n\n`HLSPlay` 组件还包含以下方法：\n\n- `setSrc(src)`：设置新的视频源。\n- `play()`：播放视频。\n\n## 示例\n\n以下是一个如何在 Vue 组件中使用 `HLSPlay` 组件的示例：\n\n```vue\n<template>\n  <div>\n    <HLSPlay :src=\"videoSrc\" :cover_url=\"coverUrl\" ref=\"hlsPlayer\" />\n    <button @click=\"changeVideo\">Change Video</button>\n  </div>\n</template>\n\n<script>\nimport HLSPlay from './HLSPlay'\n\nexport default {\n  components: {\n    HLSPlay\n  },\n  data() {\n    return {\n      videoSrc: 'https://path/to/your/video.m3u8',\n      coverUrl: 'https://path/to/your/cover.jpg'\n    }\n  },\n  methods: {\n    changeVideo() {\n      this.videoSrc = 'https://path/to/another/video.m3u8'\n      this.$refs.hlsPlayer.setSrc(this.videoSrc)\n      this.$refs.hlsPlayer.play()\n    }\n  }\n}\n</script>\n```\n\n在这个示例中，`HLSPlay` 组件用于播放一个 HLS 视频。当你点击 “Change Video” 按钮时，视频源会被更改，新的视频会开始播放。希望这个文档能对你有所帮助！"
    }
  ]
}
